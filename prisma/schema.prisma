// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// #region NextAuth
enum UserRole {
    ADMIN
    MODERATOR
    USER
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          UserRole  @default(USER)

    isBanned Boolean @default(false)
    isLocked Boolean @default(false)

    accounts Account[]
    sessions Session[]

    publishedModules Module[]
    approvedVersions Version[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// #endregion

model Module {
    id               String @id @default(cuid())
    name             String @unique @db.Text
    shortDescription String @db.Text
    description      String @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    publisher  User               @relation(fields: [publisherId], references: [id])
    versions   Version[]
    dependants ModuleDependency[]

    publisherId String
}

model Version {
    id        String   @id @default(cuid())
    number    Int      @default(autoincrement())
    name      String
    changelog String   @db.Text
    s3Key     String   @unique
    approved  Boolean?
    downloads Int      @default(0)

    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @default(now()) @updatedAt
    approvedAt DateTime?

    module            Module             @relation(fields: [moduleId], references: [id])
    approver          User?              @relation(fields: [approverId], references: [id])
    dependsOnModules  ModuleDependency[]
    dependsOnBinaries BinaryDependency[]

    moduleId   String
    approverId String?

    @@unique([moduleId, name])
}

model ModuleDependency {
    id       String  @id @default(cuid())
    optional Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    module  Module  @relation(fields: [moduleId], references: [id])
    version Version @relation(fields: [versionId], references: [id])

    moduleId  String
    versionId String

    @@index([moduleId, versionId])
}

model BinaryDependency {
    id       String  @id @default(cuid())
    optional Boolean @default(false)

    url String @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    version Version @relation(fields: [versionId], references: [id])

    versionId String
}
